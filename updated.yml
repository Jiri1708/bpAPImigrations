openapi: 3.0.0

info:
  title: Eshop API
  description: API pro správu eshopu s podporou OIDC
  version: 1.1.1

servers:
  - url: https://eshop.example.com/v1

components:
  securitySchemes:
    OIDC:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://auth.example.com/oauth2/authorize
          tokenUrl: https://auth.example.com/oauth2/token
          scopes:
            openid: Získání identifikátoru uživatele
            profile: Přístup k uživatelskému profilu
            email: Přístup k uživatelské emailové adrese
            products.read: Čtení seznamu produktů
            products.create: Přidání nového produktu
            products.delete: Smazání produktu
            products.update: Aktualizace produktu
            categories.read: Čtení seznamu kategorií
            categories.create: Přidání nové kategorie
            orders.read: Čtení seznamu objednávek
            orders.create: Vytvoření nové objednávky
            orders.update: Aktualizace objednávky
            payments.create: Vytvoření platby

  parameters:
    TraceStateHeader:
      name: tracestate
      in: header
      required: false
      description: "Korelaci žádosti pro sledování toku dat."
      schema:
        type: string

    ClientIPHeader:
      name: X-Client-IP
      in: header
      required: false
      description: "IP adresa klienta, který provádí požadavek."
      schema:
        type: string
        format: ipv4

paths:
  /products:
    get:
      tags:
        - products controller
      summary: Získat seznam produktů
      operationId: getProducts
      security:
        - OIDC: [openid, profile, products.read]
      parameters:
        - $ref: "#components/parameters/TraceStateHeader"
        - $ref: "#components/parameters/ClientIPHeader"
      responses:
        "200":
          description: Úspěšná odpověď se seznamem produktů
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    name:
                      type: string
                      example: "Produkt A"
                    price:
                      type: number
                      format: float
                      example: 19.99

    post:
      tags:
        - products controller
      summary: Přidat nový produkt
      operationId: addProduct
      security:
        - OIDC: [openid, profile, products.create]
      parameters:
        - $ref: "#components/parameters/TraceStateHeader"
        - $ref: "#components/parameters/ClientIPHeader"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Nový Produkt"
                price:
                  type: number
                  format: float
                  example: 29.99

      responses:
        "201":
          description: Produkt byl úspěšně přidán.
        "400":
          description: Chybný požadavek.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Chybí povinné pole 'name'."

  /products/{id}:
    get:
      tags:
        - products controller
      summary: Získat detail produktu podle ID.
      operationId: getProductById
      parameters:
        - name: id
          in: path
          required: true
          description: ID produktu, který chcete získat.
          schema:
            type: integer 
            example : 1 
        - $ref : "#components/parameters/TraceStateHeader"
        - $ref : "#components/parameters/ClientIPHeader"
      security:
        - OIDC: [openid, profile, products.read]
      responses:
        "200":
          description : Úspěšná odpověď s detaily produktu.
          content :
            application/json :
              schema :
                type : object 
                properties :
                  id :
                    type : integer 
                    example : 1 
                  name :
                    type : string 
                    example : "Produkt A" 
                  price :
                    type : number 
                    format : float 
                    example : 19.99 

        "404":
          description : Produkt nenalezen.
          content :
            application/json :
              schema :
                type : object 
                properties :
                  error :
                    type : string 
                    example : "Produkt s ID 1 nebyl nalezen."

    put:
      tags:
        - products controller
      summary : Aktualizovat produkt podle ID.
      operationId : updateProduct.
      parameters :
       - name : id 
         in : path 
         required : true 
         description : ID produktu, který chcete aktualizovat.
         schema :
           type : integer 
           example : 1 
       - $ref : "#components/parameters/TraceStateHeader"
       - $ref : "#components/parameters/ClientIPHeader"
      security :
         - OIDC: [openid, profile, products.update]
      requestBody :
         required: true 
         content :
           application/json :
             schema :
               type : object 
               properties :
                 name:
                   type: string 
                   example: "Aktualizovaný Produkt" 

                 price :
                   type: number 
                   format: float 
                   example: 25.99 
      responses:
        "200":
         description: "Produkt byl úspěšně aktualizován."
        "404":
         description: "Produkt nenalezen."
         content:
          application/json:
            schema:
              type: object 
              properties:
                error:
                  type: string 
                  example: "Produkt s ID 1 nebyl nalezen."
    delete:
      tags:
        - products controller
      summary: Smazat produkt podle ID.
      operationId: deleteProduct.
      parameters:
       - name: id 
         in: path 
         required: true 
         description: "ID produktu, který chcete smazat."
         schema:
           type: number 
           example: 1 
       - $ref: "#components/parameters/TraceStateHeader"
       - $ref: "#components/parameters/ClientIPHeader"
      security:
        - OIDC: [openid,profile,products.delete]
      responses:
        "204":
          description: "Produkt byl úspěšně smazán."
        "404":
          description: "Produkt nenalezen."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Produkt s ID 1 nebyl nalezen."
  /categories:
    get:
      tags:
        - categories controller
      summary: Get categories list.
      operationId: getCategories
      security:
       - OIDC: [openid, profile,categories.read]
      parameters:
       - $ref: "#components/parameters/TraceStateHeader"

       - $ref: "#components/parameters/ClientIPHeader"
      responses:
        "200":
          description: "Successful response with category list."
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    name:
                      type: string
                      example: "Kategorie A"
        "401":
         description: "Unauthorized access."
         content:
           application/json:
             schema:
               type: object
               properties:
                 error:
                   type: string
                   example: "Invalid token."
    post:
      tags:
       - categories controller
      summary: Add a new category.
      operationId: addCategory.
      security:
       - OIDC: [openid, profile,categories.create]
      parameters:
       - $ref: "#components/parameters/TraceStateHeader"
       - $ref: "#components/parameters/ClientIPHeader"

      requestBody:
        required: true
        content:
          application/json:
           schema:
             type: object
             properties:
               name:
                 type: string
                 example: "Nová Kategorie"
      responses:
       "201":
         description: "Category was successfully added."

       "400":
         description: "Bad request."
         content:
           application/json:
             schema:
               type: object
               properties:
                 error:
                   type: string
                   example: "Missing required field 'name'."
  /orders:
    get:
      tags:
        - orders controller
      summary: Get orders list.
      operationId: getOrders.
      security:
       - OIDC: [openid, profile, orders.read]
      parameters:
       - $ref: "#components/parameters/TraceStateHeader"
       - $ref: "#components/parameters/ClientIPHeader"
      responses:
       "200":
         description: "Successful response with order list."
         content:
           application/json:
             schema:
               type: array
               items: 
                type: object
                properties:
                 id: 
                  type: string
                  format: guid
                  example: 7e68b0ce-e037-49e6-bf75-7098ac91dfc5
                 totalPrice:
                  type: number
                  format: float
                  example: 19.99
                 status:
                  type: string 
                  example: "Zpracováno" 
    post:
      tags:
        - orders controller
      summary: Add a new order.
      operationId: createOrder.
      security:
        - OIDC: [openid, profile, orders.create]
      parameters:
        - $ref: "#components/parameters/TraceStateHeader"
        - $ref: "#components/parameters/ClientIPHeader"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productIds:
                  type: array
                  items:
                    type: integer
                  example: [1, 2, 3]
                quantities:
                  type: array
                  items:
                    type: number
                    example: [2]
      responses:
        "201":
          description: "Order was successfully created."
        "400":
          description: "Bad request."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Missing required field 'productIds'."
  /orders/{id}:
    get:
      tags:
        - orders controller
      summary: Get order details by ID.
      operationId: getOrderById
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the order you want to retrieve.
          schema:
            type: number
            example: 1
        - $ref: "#components/parameters/TraceStateHeader"
        - $ref: "#components/parameters/ClientIPHeader"
      security:
        - OIDC: [openid,profile,orders.read]
      responses:
        "200":
          description: "Successful response with order details."
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer 
                    example: 1
                  totalPrice: 
                    type: integer 
                    example: 1
                  status: 
                    type: string 
                    example: "Zpracováno"
        "404":
          description: "Order not found."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string 
                    example: "Order with ID 1 was not found." 

