@startuml

interface IPaymentProcessor {
    +processPayment(amount: float): boolean
}

interface IDeliveryService {
    +scheduleDelivery(orderId: string, deliveryDate: string): boolean
}

class ClientOrder {
    +string orderId
    +string clientId
}

class Client {
    +string id
    +string email
}

class OrderProduct {
    +int quantity
    +string orderId
    +string productId
}

class Product {
    +string id
    +string name
    +float price
    +ProductStatus status
    +string categoryId
}

enum ProductStatus {
    INSTOCK
    OUTOFSTOCK
    PREORDER
}

class Category {
    +string id
    +string name
}

class Order {
    +string id
    +float totalPrice
    +OrderStatus status
    +List<string> productIds
}

class Payment implements IPaymentProcessor {
    +string id
    +PaymentMethod method
    +boolean confirmed
    +string orderId
    +float amount

    +processPayment(amount: float): boolean
}

enum PaymentMethod {
    CREDITCARD
    APPLEPAY
    GPAY
}

class Delivery implements IDeliveryService {
    +string id
    +string method
    +string deliveryDate
    +string orderId

    +scheduleDelivery(orderId: string, deliveryDate: string): boolean
}

enum OrderStatus {
    PENDING
    PROCESSING
    SHIPPED
    DELIVERED
}

Order "1" -- "0..*" OrderStatus : has >
Product "1" -- "0..*" ProductStatus : has >
Order "0..*" -- "1" Payment : processed by >
Order "0..*" -- "1" Delivery : delivered by >
Category "1" -- "0..*" Product : categorizes >
Payment "1" -- "1" PaymentMethod : uses >

' Many-to-Many relationship between Order and Product
Order "0..*" -- "0..*" OrderProduct : contains >
Product "0..*" -- "0..*" OrderProduct : includes >
Client "0..*" -- "0..*" ClientOrder : contains >
Order "0..*" -- "0..*" ClientOrder : includes >

@enduml