openapi: 3.0.0
info:
  title: Eshop API
  description: API for managing the eshop with OIDC support
  version: 1.1.1

servers:
  - url: https://eshop.example.com/v1

components:
  securitySchemes:
    OIDC:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://auth.example.com/oauth2/authorize
          tokenUrl: https://auth.example.com/oauth2/token
          scopes:
            openid: Obtain user identifier
            profile: Access to user profile
            email: Access to the user's email address
            products.read: Read product list
            products.create: Adding a new product
            products.delete: Deleting a product
            products.update: Updating a product
            categories.read: Read category list
            categories.create: Adding a new category
            orders.read: Read order list
            orders.create: Create a new order
            orders.update: Update an order
            payments.create: Create a payment
            clients.read: Read client list
            clients.create: Add a new client
            deliveries.schedule: Schedule a delivery
  schemas:
    ProductStatus:
      type: string
      enum:
        - INSTOCK
        - OUTOFSTOCK
        - PREORDER
      example: INSTOCK

    OrderStatus:
      type: string
      enum:
        - PENDING
        - PROCESSING
        - SHIPPED
        - DELIVERED
      example: PENDING

  parameters:
    TraceStateHeader:
      name: tracestate
      in: header
      required: false
      description: "Correlation of the request for data flow tracking."
      schema:
        type: string

    ClientIPHeader:
      name: X-Client-IP
      in: header
      required: false
      description: "IP address of the client making the request."
      schema:
        type: string
        format: ipv4

    IdPath:
      name: id
      in: path
      required: true
      description: ID of the entity.
      schema:
        type: string
        format: guid
        example: 7e68b0ce-e037-49e6-bf75-7098ac91dfc5

paths:
  /products:
    get:
      tags:
        - products controller
      summary: Get product list
      operationId: getProducts
      security:
        - OIDC: [openid, profile, products.read]
      parameters:
        - $ref: "#/components/parameters/TraceStateHeader"
        - $ref: "#/components/parameters/ClientIPHeader"
      responses:
        "200":
          description: Successful response with product list
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: guid
                      example: 7e68b0ce-e037-49e6-bf75-7098ac91dfc5
                    name:
                      type: string
                      example: "Product A"
                    price:
                      type: number
                      format: float
                      example: 19.99
                    status:
                      $ref: "#/components/schemas/ProductStatus"
    post:
      tags:
        - products controller
      summary: Add a new product
      operationId: addProduct
      security:
        - OIDC: [openid, profile, products.create]
      parameters:
        - $ref: "#/components/parameters/TraceStateHeader"
        - $ref: "#/components/parameters/ClientIPHeader"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "New Product"
                price:
                  type: number
                  format: float
                  example: 29.99
                status:
                  $ref: "#/components/schemas/ProductStatus"
      responses:
        "201":
          description: Product successfully added.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "7e68b0ce-e037-49e6-bf75-7098ac91dfc5"
                  name:
                    type: string
                    example: "New Product"
                  price:
                    type: number
                    format: float
                    example: 29.99
                  status:
                    $ref: "#/components/schemas/ProductStatus"
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Missing required field 'name'."

  /products/{id}:
    get:
      tags:
        - products controller
      summary: Get product details by ID
      operationId: getProductById
      parameters:
        - $ref: "#/components/parameters/IdPath"
        - $ref: "#/components/parameters/TraceStateHeader"
        - $ref: "#/components/parameters/ClientIPHeader"
      security:
        - OIDC: [openid, profile, products.read]
      responses:
        "200":
          description: Successful response with product details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: guid
                    example: 7e68b0ce-e037-49e6-bf75-7098ac91dfc5
                  name:
                    type: string
                    example: "Product A"
                  price:
                    type: number
                    format: float
                    example: 19.99
                  status:
                    $ref: "#/components/schemas/ProductStatus"
        "404":
          description: Product not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Product with ID 1 not found."

    put:
      tags:
        - products controller
      summary: Update product by ID
      operationId: updateProduct
      parameters:
        - $ref: "#/components/parameters/IdPath"
        - $ref: "#/components/parameters/TraceStateHeader"
        - $ref: "#/components/parameters/ClientIPHeader"
      security:
        - OIDC: [openid, profile, products.update]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Updated Product"
                price:
                  type: number
                  format: float
                  example: 25.99
                status:
                  $ref: "#/components/schemas/ProductStatus"
      responses:
        "200":
          description: Product successfully updated.
        "404":
          description: Product not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Product with ID 1 not found."
    delete:
      tags:
        - products controller
      summary: Delete product by ID
      operationId: deleteProduct
      parameters:
        - $ref: "#/components/parameters/IdPath"
        - $ref: "#/components/parameters/TraceStateHeader"
        - $ref: "#/components/parameters/ClientIPHeader"
      security:
        - OIDC: [openid, profile, products.delete]
      responses:
        "204":
          description: Product successfully deleted.
        "404":
          description: Product not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Product with ID 1 not found."
  /categories:
    get:
      tags:
        - categories controller
      summary: Get category list
      operationId: getCategories
      security:
        - OIDC: [openid, profile, categories.read]
      parameters:
        - $ref: "#/components/parameters/TraceStateHeader"
        - $ref: "#/components/parameters/ClientIPHeader"
      responses:
        "200":
          description: Successful response with category list
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: guid
                      example: 7e68b0ce-e037-49e6-bf75-7098ac91dfc5
                    name:
                      type: string
                      example: "Category A"
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid token"
    post:
      tags:
        - categories controller
      summary: Add a new category
      operationId: addCategory
      security:
        - OIDC: [openid, profile, categories.create]
      parameters:
        - $ref: "#/components/parameters/TraceStateHeader"
        - $ref: "#/components/parameters/ClientIPHeader"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "New Category"
      responses:
        "201":
          description: Category successfully added.
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Missing required field 'name'."
  /orders:
    get:
      tags:
        - orders controller
      summary: Get order list
      operationId: getOrders
      security:
        - OIDC: [openid, profile, orders.read]
      parameters:
        - $ref: "#/components/parameters/TraceStateHeader"
        - $ref: "#/components/parameters/ClientIPHeader"
      responses:
        "200":
          description: Successful response with order list
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: guid
                      example: 7e68b0ce-e037-49e6-bf75-7098ac91dfc5
                    totalPrice:
                      type: number
                      format: float
                      example: 19.99
                    status:
                      type: string
                      example: "Processed"
    post:
      tags:
        - orders controller
      summary: Create a new order
      operationId: createOrder
      security:
        - OIDC: [openid, profile, orders.create]
      parameters:
        - $ref: "#/components/parameters/TraceStateHeader"
        - $ref: "#/components/parameters/ClientIPHeader"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productIds:
                  type: array
                  items:
                    type: integer
                  example: [1, 2, 3]
                quantities:
                  type: array
                  items:
                    type: number
                    example: [2]
      responses:
        "201":
          description: Order successfully created.
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Missing required field 'productIds'."
  /orders/{id}:
    get:
      tags:
        - orders controller
      summary: Get order details by ID
      operationId: getOrderById
      parameters:
        - $ref: "#/components/parameters/IdPath"
        - $ref: "#/components/parameters/TraceStateHeader"
        - $ref: "#/components/parameters/ClientIPHeader"
      security:
        - OIDC: [openid, profile, orders.read]
      responses:
        "200":
          description: Successful response with order details
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: guid
                    example: 7e68b0ce-e037-49e6-bf75-7098ac91dfc5
                  totalPrice:
                    type: integer
                    example: 1
                  status:
                    type: string
                    example: "Processed"
        "404":
          description: Order not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Order with ID 125125 not found"

  /clients:
    get:
      tags:
        - clients controller
      summary: Get client list
      operationId: getClients
      security:
        - OIDC: [openid, profile, clients.read]
      parameters:
        - $ref: "#/components/parameters/TraceStateHeader"
        - $ref: "#/components/parameters/ClientIPHeader"
      responses:
        "200":
          description: Successful response with client list
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: guid
                      example: 7e68b0ce-e037-49e6-bf75-7098ac91dfc5
                    email:
                      type: string
                      example: "client@example.com"
    post:
      tags:
        - clients controller
      summary: Add a new client
      operationId: addClient
      security:
        - OIDC: [openid, profile, clients.create]
      parameters:
        - $ref: "#/components/parameters/TraceStateHeader"
        - $ref: "#/components/parameters/ClientIPHeader"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "newclient@example.com"
      responses:
        "201":
          description: Client successfully added.
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Missing required field 'email'."

  /payments:
    post:
      tags:
        - payments controller
      summary: Create a payment
      operationId: createPayment
      security:
        - OIDC: [openid, profile, payments.create]
      parameters:
        - $ref: "#/components/parameters/TraceStateHeader"
        - $ref: "#/components/parameters/ClientIPHeader"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                orderId:
                  type: string
                  format: guid
                  example: "7e68b0ce-e037-49e6-bf75-7098ac91dfc5"
                method:
                  type: string
                  example: "credit_card"
                amount:
                  type: number
                  format: float
                  example: 100.00
      responses:
        "201":
          description: Payment successfully created.
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Missing required field 'orderId'."
  /deliveries:
    post:
      tags:
        - deliveries controller
      summary: Schedule a delivery
      operationId: scheduleDelivery
      security:
        - OIDC: [openid, profile, deliveries.schedule]
      parameters:
        - $ref: "#/components/parameters/TraceStateHeader"
        - $ref: "#/components/parameters/ClientIPHeader"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                orderId:
                  type: string
                  format: guid
                  example: "7e68b0ce-e037-49e6-bf75-7098ac91dfc5"
                deliveryDate:
                  type: string
                  format: date
                  example: "2023-10-01"
      responses:
        "201":
          description: Delivery successfully scheduled.
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Missing required field 'orderId'."